[{"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Dashboard\\Screen\\DashboardScreen.jsx":"1","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\NewBuyScreen\\BuyScreen.jsx":"2","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\App.js":"3","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Buy\\Field\\index.jsx":"4","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Dashboard\\Portal\\Portal.jsx":"5","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Dashboard\\Field\\Name.jsx":"6","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Header\\StoreHeader.jsx":"7","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Add\\Button\\index.jsx":"8","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Receipt\\RenewReceipt.jsx":"9","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Login\\Field\\LoginUsername.jsx":"10","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Add\\Field\\Account.jsx":"11","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Add\\Button\\DoneButton.jsx":"12","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Dashboard\\Form\\FindForm.jsx":"13","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Buy\\Record\\Record.jsx":"14","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Api.js":"15","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\shared\\constants.js":"16","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\api\\api.js":"17","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\index.js":"18","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\Screen.jsx":"19","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\Header.jsx":"20","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\index.jsx":"21","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\Form.jsx":"22","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\Button.jsx":"23","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\store.js":"24","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Helpers\\index.js":"25","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\api.js":"26","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Button\\index.js":"27","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Field\\index.js":"28","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Screen\\index.js":"29","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Form\\FindForm.jsx":"30","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Login.jsx":"31","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Dashboard.jsx":"32","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Form\\Login.jsx":"33","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Form\\Find.jsx":"34","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Form\\index.jsx":"35","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Header\\index.js":"36","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin.jsx":"37","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Table\\index.jsx":"38","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\User.jsx":"39","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Modal\\UserModal.jsx":"40","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MckeePureWater\\Screen\\PurchaseScreen.jsx":"41","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MckeePureWater\\Screen\\LoginScreen.jsx":"42"},{"size":5320,"mtime":1618107561474,"results":"43","hashOfConfig":"44"},{"size":45699,"mtime":1618240934095,"results":"45","hashOfConfig":"44"},{"size":1883,"mtime":1619714106874,"results":"46","hashOfConfig":"44"},{"size":9793,"mtime":1618103806273,"results":"47","hashOfConfig":"44"},{"size":1238,"mtime":1613844357588,"results":"48","hashOfConfig":"44"},{"size":1066,"mtime":1617819500767,"results":"49","hashOfConfig":"44"},{"size":660,"mtime":1613780460584,"results":"50","hashOfConfig":"44"},{"size":207,"mtime":1617750287499,"results":"51","hashOfConfig":"44"},{"size":3545,"mtime":1614384370288,"results":"52","hashOfConfig":"44"},{"size":988,"mtime":1617646449745,"results":"53","hashOfConfig":"44"},{"size":1010,"mtime":1617748952110,"results":"54","hashOfConfig":"44"},{"size":530,"mtime":1617751368485,"results":"55","hashOfConfig":"44"},{"size":771,"mtime":1618158322342,"results":"56","hashOfConfig":"44"},{"size":3813,"mtime":1618183587968,"results":"57","hashOfConfig":"44"},{"size":717,"mtime":1618619398820,"results":"58","hashOfConfig":"44"},{"size":1660,"mtime":1618974683531,"results":"59","hashOfConfig":"44"},{"size":15745,"mtime":1618962002019,"results":"60","hashOfConfig":"44"},{"size":246,"mtime":1618600538630,"results":"61","hashOfConfig":"44"},{"size":2059,"mtime":1618535901358,"results":"62","hashOfConfig":"44"},{"size":559,"mtime":1618506737086,"results":"63","hashOfConfig":"44"},{"size":9710,"mtime":1618546316877,"results":"64","hashOfConfig":"44"},{"size":5958,"mtime":1618533350187,"results":"65","hashOfConfig":"44"},{"size":1184,"mtime":1618543599279,"results":"66","hashOfConfig":"44"},{"size":31924,"mtime":1619653616325,"results":"67","hashOfConfig":"44"},{"size":81,"mtime":1618586205671,"results":"68","hashOfConfig":"44"},{"size":5612,"mtime":1618769255484,"results":"69","hashOfConfig":"44"},{"size":831,"mtime":1619462492716,"results":"70","hashOfConfig":"44"},{"size":868,"mtime":1619237395386,"results":"71","hashOfConfig":"44"},{"size":457,"mtime":1619282424959,"results":"72","hashOfConfig":"44"},{"size":1174,"mtime":1619045534856,"results":"73","hashOfConfig":"44"},{"size":2026,"mtime":1619375807084,"results":"74","hashOfConfig":"44"},{"size":2331,"mtime":1619383441970,"results":"75","hashOfConfig":"44"},{"size":2923,"mtime":1619142706399,"results":"76","hashOfConfig":"44"},{"size":4148,"mtime":1619144455596,"results":"77","hashOfConfig":"44"},{"size":386,"mtime":1619149790590,"results":"78","hashOfConfig":"44"},{"size":536,"mtime":1619020375060,"results":"79","hashOfConfig":"44"},{"size":1359,"mtime":1619541671372,"results":"80","hashOfConfig":"44"},{"size":1769,"mtime":1619543010093,"results":"81","hashOfConfig":"44"},{"size":1499,"mtime":1619543003581,"results":"82","hashOfConfig":"44"},{"size":1470,"mtime":1619545935988,"results":"83","hashOfConfig":"44"},{"size":446,"mtime":1619713680204,"results":"84","hashOfConfig":"44"},{"size":724,"mtime":1619719493079,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1kxwzx3",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Dashboard\\Screen\\DashboardScreen.jsx",["178"],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\NewBuyScreen\\BuyScreen.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\App.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Buy\\Field\\index.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Dashboard\\Portal\\Portal.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Dashboard\\Field\\Name.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Header\\StoreHeader.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Add\\Button\\index.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Receipt\\RenewReceipt.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Login\\Field\\LoginUsername.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Add\\Field\\Account.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Add\\Button\\DoneButton.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Dashboard\\Form\\FindForm.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\Screen\\Buy\\Record\\Record.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Api.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\shared\\constants.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\api\\api.js",[],["179","180"],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\index.js",[],["181","182"],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\Screen.jsx",[],["183","184"],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\Header.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\index.jsx",["185","186","187"],"import { useState, useEffect } from 'react';\r\nimport Screen from './Screen';\r\nimport Header from './Header';\r\nimport { Modal, Button, Form, Icon, Table } from 'semantic-ui-react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { mckeeApi } from '../../../api/api';\r\nimport { TransitionPulseButton } from './Button';\r\n\r\nexport const Admin = ({ history }) => {\r\n    const [data, setData] = useState([]);\r\n    const [user, setUser] = useState({});\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [action, setAction] = useState('');\r\n\r\n    const updateUserList = (values) => {\r\n        setData((users) => {\r\n            users.map((user) => {\r\n                return user.user_id === values.user_id ? values : user;\r\n            });\r\n        });\r\n        setUser({});\r\n        setAction('');\r\n        setOpenModal(false);\r\n    };\r\n\r\n    const addNewUserToList = (values) => {\r\n        setData((prev) => [...prev, values]);\r\n        setAction('');\r\n        setOpenModal(false);\r\n    };\r\n\r\n    const removeUserFromList = async (user_id) => {\r\n        setAction('delete');\r\n        await mckeeApi.deleteUser(user_id);\r\n        setData((prev) => prev.filter((user) => user.user_id !== user_id));\r\n        setAction('');\r\n    };\r\n\r\n    const onSubmit = async ({ username, password }) => {\r\n        if (username && password) {\r\n            try {\r\n                addNewUserToList(\r\n                    await mckeeApi.addUser({ username, password })\r\n                );\r\n            } catch (err) {\r\n                return console.log(err.message);\r\n            }\r\n        }\r\n\r\n        return { username, password };\r\n    };\r\n\r\n    const editUser = ({ user_id, username, password }) => {\r\n        setUser({\r\n            user_id,\r\n            username,\r\n            password,\r\n        });\r\n        setAction('edit');\r\n        setOpenModal(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!history.location.state) history.push('/');\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await mckeeApi.getUsers();\r\n            console.log('fetchData', result);\r\n            setData(result);\r\n        };\r\n\r\n        if (history.location.state) fetchData();\r\n    }, [history]);\r\n\r\n    return (\r\n        <Screen open={history.location.state ? true : false} size={866}>\r\n            <Header />\r\n            <Table celled compact definition basic inverted size='large'>\r\n                <Table.Header fullWidth>\r\n                    <Table.Row style={{ fontSize: '22px' }}>\r\n                        <Table.HeaderCell content='Username' />\r\n                        <Table.HeaderCell content='Password' />\r\n                        <Table.HeaderCell\r\n                            content='Action'\r\n                            width={5}\r\n                            textAlign='right'\r\n                        />\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {data.map(({ username, password, user_id }, key) => {\r\n                        return (\r\n                            <Table.Row\r\n                                key={key}\r\n                                style={{\r\n                                    fontSize: '20px',\r\n                                    fontWeight: 'bold',\r\n                                }}>\r\n                                <Table.Cell>{username}</Table.Cell>\r\n                                <Table.Cell>{password}</Table.Cell>\r\n                                <Table.Cell>\r\n                                    <Form.Button\r\n                                        content='Delete'\r\n                                        floated='right'\r\n                                        negative\r\n                                        size='huge'\r\n                                        onClick={() => {\r\n                                            removeUserFromList(user_id);\r\n                                        }}\r\n                                    />\r\n                                    <TransitionPulseButton\r\n                                        button={(handleClick) => (\r\n                                            <Form.Button\r\n                                                size='huge'\r\n                                                content='Edit'\r\n                                                floated='right'\r\n                                                primary\r\n                                                onClick={() =>\r\n                                                    handleClick(\r\n                                                        editUser({\r\n                                                            user_id,\r\n                                                            username,\r\n                                                            password,\r\n                                                        })\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        );\r\n                    })}\r\n                </Table.Body>\r\n                <Table.Footer fullWidth>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell colSpan='4'>\r\n                            <Form.Group>\r\n                                <Form.Button\r\n                                    type='button'\r\n                                    icon\r\n                                    content='Done'\r\n                                    floated='right'\r\n                                    secondary\r\n                                    size='huge'\r\n                                    onClick={() => history.push('/')}\r\n                                />\r\n                                <Form.Button\r\n                                    floated='right'\r\n                                    icon\r\n                                    type='button'\r\n                                    labelPosition='left'\r\n                                    primary\r\n                                    size='huge'\r\n                                    onClick={() => setOpenModal(true)}>\r\n                                    <Icon name='user' /> Add User\r\n                                </Form.Button>\r\n                            </Form.Group>\r\n                        </Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Footer>\r\n            </Table>\r\n            <Modal\r\n                open={openModal}\r\n                closeOnDimmerClick={false}\r\n                closeOnDocumentClick={false}\r\n                dimmer='blurring'\r\n                size='fullscreen'\r\n                basic\r\n                centered>\r\n                <Modal.Content>\r\n                    <FinalForm\r\n                        onSubmit={onSubmit}\r\n                        initialValues={{ ...user }}\r\n                        render={({ handleSubmit }) => (\r\n                            <Form size='massive' onSubmit={handleSubmit}>\r\n                                <Form.Group>\r\n                                    <Form.Input type='hidden' width={4} />\r\n                                    <Field\r\n                                        name='username'\r\n                                        render={({ input }) => (\r\n                                            <Form.Input\r\n                                                {...input}\r\n                                                placeholder='username'\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    <Field\r\n                                        name='password'\r\n                                        render={({ input }) => (\r\n                                            <Form.Input\r\n                                                {...input}\r\n                                                placeholder='password'\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    <Form.Button\r\n                                        content={!user.user_id ? 'Add' : 'Save'}\r\n                                        type='submit'\r\n                                        size='massive'\r\n                                        circular\r\n                                        primary\r\n                                        onClick={() => {\r\n                                            setAction('add');\r\n                                        }}\r\n                                    />\r\n                                    <Form.Button\r\n                                        content='Cancel'\r\n                                        type='button'\r\n                                        size='massive'\r\n                                        circular\r\n                                        secondary\r\n                                        onClick={() => {\r\n                                            setUser({});\r\n                                            setOpenModal(false);\r\n                                        }}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form>\r\n                        )}\r\n                    />\r\n                </Modal.Content>\r\n            </Modal>\r\n        </Screen>\r\n    );\r\n};\r\nexport default Admin;\r\n",["188","189"],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\Form.jsx",["190","191"],"import { useState, useEffect } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Transition } from 'semantic-ui-react';\r\n\r\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\nexport const EditButton = ({ onClick }) => {\r\n    const [visible, setVisible] = useState(true);\r\n\r\n    return (\r\n        <Transition visible={visible} animation='pulse' duration='500'>\r\n            <Form.Button\r\n                content='Edit'\r\n                color='blue'\r\n                onClick={() => {\r\n                    onClick(setVisible);\r\n                }}\r\n            />\r\n            ;\r\n        </Transition>\r\n    );\r\n};\r\n\r\nexport const DeleteButton = ({ onClick }) => {\r\n    const [visible, setVisible] = useState(true);\r\n    return (\r\n        <Transition visible={visible} animation='pulse' duration='500'>\r\n            <Form.Button\r\n                content='Delete'\r\n                color='red'\r\n                onClick={() => {\r\n                    onClick(setVisible);\r\n                }}\r\n            />\r\n        </Transition>\r\n    );\r\n};\r\n\r\nexport const AdminForm = ({ user }) => {\r\n    const [edit, setEdit] = useState(false);\r\n    const [del, setDelete] = useState(false);\r\n\r\n    const onSubmit = async (values) => {\r\n        console.log({ values });\r\n    };\r\n\r\n    return (\r\n        <FinalForm\r\n            onSubmit={onSubmit}\r\n            initialValues={{ ...user }}\r\n            render={({ handleSubmit }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group inline>\r\n                        <Field\r\n                            name='username'\r\n                            render={({ input }) => (\r\n                                <Form.Input {...input} readOnly={edit} />\r\n                            )}\r\n                        />\r\n                        <Field\r\n                            name='password'\r\n                            render={({ input }) => (\r\n                                <Form.Input {...input} readOnly={del} />\r\n                            )}\r\n                        />\r\n                        <EditButton\r\n                            onClick={(setVisible) => {\r\n                                setVisible((prev) => !prev);\r\n                                setEdit(true);\r\n                            }}\r\n                        />\r\n                        <DeleteButton\r\n                            onClick={(setVisible) => {\r\n                                setVisible((prev) => !prev);\r\n                                setDelete(true);\r\n                            }}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport const AdminLoginForm = ({ onSubmit, cancel }) => {\r\n    const [error, setError] = useState(false);\r\n    const [visibleSubmitButton, setVisibleSubmitButton] = useState(true);\r\n    const [visibleCancelButton, setVisibleCancelButton] = useState(true);\r\n\r\n    return (\r\n        <FinalForm\r\n            onSubmit={onSubmit}\r\n            render={({ handleSubmit, form }) => (\r\n                <Form\r\n                    size='huge'\r\n                    onSubmit={(event) => {\r\n                        handleSubmit(event)\r\n                            .then()\r\n                            .catch((err) => {\r\n                                setError(true);\r\n                                form.reset({});\r\n                            });\r\n                    }}>\r\n                    <Form.Group inline>\r\n                        <Field\r\n                            name='password'\r\n                            render={({ input }) => (\r\n                                <Form.Input\r\n                                    {...input}\r\n                                    id='password'\r\n                                    placeholder='password'\r\n                                    type='password'\r\n                                    focus\r\n                                    error={error}\r\n                                    onChange={(e, { value }) => {\r\n                                        setError(false);\r\n                                        return input.onChange(value);\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Transition\r\n                            visible={visibleSubmitButton}\r\n                            animation='pulse'\r\n                            duration='500'>\r\n                            <Form.Button\r\n                                size='huge'\r\n                                content='Submit'\r\n                                type='submit'\r\n                                color={error ? 'red' : 'blue'}\r\n                                onClick={() =>\r\n                                    setVisibleSubmitButton((prev) => !prev)\r\n                                }\r\n                            />\r\n                        </Transition>\r\n                        <Transition\r\n                            visible={visibleCancelButton}\r\n                            animation='pulse'\r\n                            duration='500'>\r\n                            <Form.Button\r\n                                size='huge'\r\n                                content='Cancel'\r\n                                secondary\r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    setVisibleCancelButton((prev) => !prev);\r\n                                    setTimeout(() => {\r\n                                        cancel();\r\n                                    }, 500);\r\n                                }}\r\n                            />\r\n                        </Transition>\r\n                    </Form.Group>\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AdminForm;\r\n",["192","193"],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin\\Button.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\store.js",["194","195"],"import { useState, createContext } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { channels } from '../../shared/constants';\r\nconst { ipcRenderer } = window;\r\n\r\nexport const StoreContext = createContext(null);\r\n\r\nexport const send = (message, values) =>\r\n    new Promise((resolve, reject) => {\r\n        console.log('send', { message, values });\r\n        ipcRenderer.send(message, values);\r\n        ipcRenderer.on(message, (_, { error, data }) => {\r\n            ipcRenderer.removeAllListeners(message);\r\n            error ? reject(error) : resolve(data);\r\n        });\r\n    });\r\n\r\nconst Store = ({ children, history }) => {\r\n    // Button Error\r\n    const [error, setError] = useState(false);\r\n\r\n    // Backup States\r\n    const [loading, setLoading] = useState(false);\r\n    const [fileSave, setFileSave] = useState('Backup');\r\n\r\n    // User Table Admin\r\n    const [users, setUsers] = useState([]);\r\n    const [user, setUser] = useState({});\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [edit, setEdit] = useState(false);\r\n\r\n    // CRUD\r\n    const crud = {\r\n        create: async ({ newItem, setState, channel }) => {\r\n            try {\r\n                const result = await send(channel, newItem);\r\n                setState((list) => [...list, result]);\r\n            } catch (err) {\r\n                throw err;\r\n            }\r\n        },\r\n        read: async (setState) => {\r\n            try {\r\n                const data = await send(channels.GET_USERS);\r\n                console.log('Response From Server', { data });\r\n                setState(data);\r\n            } catch (err) {\r\n                setState([]);\r\n                return console.log('Unable to get user');\r\n            }\r\n        },\r\n        update: async ({ updatedItem, setState, channel }) => {\r\n            try {\r\n                await send(channel, updatedItem);\r\n                setState((list) => {\r\n                    return list.map((item) =>\r\n                        item.user_id === updatedItem.user_id\r\n                            ? updatedItem\r\n                            : item\r\n                    );\r\n                });\r\n            } catch (err) {\r\n                setUser({});\r\n                throw err;\r\n            }\r\n        },\r\n        delete: ({ deletedId, setState }) => {\r\n            console.log({ deletedId, setState });\r\n            setState((list) =>\r\n                list.filter((item) => item.user_id !== deletedId)\r\n            );\r\n        },\r\n    };\r\n\r\n    // Effect\r\n    const TransitionEffect = {\r\n        pulse: {\r\n            animation: 'pulse',\r\n            duration: 500,\r\n        },\r\n    };\r\n\r\n    // Helpers\r\n    const helpers = {\r\n        sleep: (ms) => new Promise((resolve) => setTimeout(resolve, ms)),\r\n        normalize: {\r\n            phone: (value) => {\r\n                if (!value) return value;\r\n                const onlyNums = value.replace(/[^\\d]/g, '');\r\n                if (onlyNums.length <= 3) return onlyNums;\r\n                if (onlyNums.length <= 6) return onlyNums;\r\n                return `${onlyNums.slice(0, 3)}-${onlyNums.slice(3, 7)}`;\r\n            },\r\n            account: (value) => {\r\n                if (!value) return value;\r\n                const onlyNums = value.replace(/[^\\d]/g, '');\r\n                if (onlyNums.length <= 9) return onlyNums;\r\n                return onlyNums.slice(0, 9);\r\n            },\r\n        },\r\n        reset: {\r\n            field: (change, value) => {\r\n                setError(false);\r\n                change(value);\r\n            },\r\n        },\r\n    };\r\n\r\n    // LOGIN SCREEN COMPONENT\r\n    const LoginComponent = {\r\n        screen: {\r\n            open: history ? true : false,\r\n            width: {\r\n                style: {\r\n                    maxWidth: 450,\r\n                },\r\n            },\r\n            close: {\r\n                closeOnDocumentClick: false,\r\n                closeOnEscape: false,\r\n                closeOnDimmerClick: false,\r\n                closeOnPortalMouseLeave: false,\r\n            },\r\n            segment: {\r\n                style: {\r\n                    margin: 0,\r\n                    height: '100%',\r\n                    overflow: 'hidden',\r\n                    zIndex: 1000,\r\n                    backgroundColor: '#002b487d',\r\n                },\r\n            },\r\n            grid: {\r\n                textAlign: 'center',\r\n                verticalAlign: 'middle',\r\n                style: {\r\n                    height: '100vh',\r\n                },\r\n            },\r\n            header: {\r\n                title: 'Mckee Pure Water',\r\n                content: 'Version 1.0',\r\n            },\r\n        },\r\n        header: {\r\n            title: 'Mckee Pure Water',\r\n            content: 'User Login Version 1.0.0',\r\n        },\r\n        input: {\r\n            username: {\r\n                attr: {\r\n                    id: 'username',\r\n                    type: 'text',\r\n                    placeholder: 'username',\r\n                    className: 'blueIcon',\r\n                    size: 'massive',\r\n                    icon: 'user circle',\r\n                    iconPosition: 'left',\r\n                    autoComplete: 'off',\r\n                    spellCheck: 'false',\r\n                    inverted: true,\r\n                    transparent: true,\r\n                    fluid: true,\r\n                    focus: true,\r\n                },\r\n                onFocus: () => {},\r\n                onChange: (change, value) => {\r\n                    setError(false);\r\n                    change(value);\r\n                },\r\n            },\r\n            password: {\r\n                attr: {\r\n                    id: 'password',\r\n                    type: 'password',\r\n                    placeholder: 'password',\r\n                    className: 'blueIcon',\r\n                    size: 'massive',\r\n                    icon: 'lock',\r\n                    iconPosition: 'left',\r\n                    autoComplete: 'off',\r\n                    spellCheck: 'false',\r\n                    inverted: true,\r\n                    transparent: true,\r\n                    fluid: true,\r\n                    focus: true,\r\n                },\r\n                onFocus: () => {},\r\n                onChange: (change, value) => {\r\n                    setError(false);\r\n                    change(value);\r\n                },\r\n            },\r\n        },\r\n        button: {\r\n            login: {\r\n                attr: {\r\n                    type: 'submit',\r\n                    content: !error ? 'Login' : error,\r\n                    color: !error ? 'blue' : 'red',\r\n                    size: 'huge',\r\n                    icon: 'sign-in',\r\n                    labelPosition: 'right',\r\n                    circular: true,\r\n                    fluid: true,\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            admin: {\r\n                attr: {\r\n                    content: 'Admin',\r\n                    type: 'button',\r\n                    color: 'yellow',\r\n                    size: 'huge',\r\n                    icon: 'database',\r\n                    labelPosition: 'right',\r\n                    circular: true,\r\n                    fluid: true,\r\n                },\r\n                onClick: async () => {\r\n                    setError(false);\r\n                    await helpers.sleep(500);\r\n                    history.push({\r\n                        pathname: '/admin/login',\r\n                        state: { open: true },\r\n                    });\r\n                },\r\n            },\r\n            close: {\r\n                attr: {\r\n                    content: 'Close',\r\n                    type: 'button',\r\n                    color: 'black',\r\n                    size: 'huge',\r\n                    icon: 'close',\r\n                    labelPosition: 'right',\r\n                    circular: true,\r\n                    fluid: true,\r\n                },\r\n                onClick: async () => {\r\n                    await helpers.sleep(500);\r\n                    await send(channels.CLOSE_APP);\r\n                },\r\n            },\r\n            backup: {\r\n                attr: {\r\n                    disabled: loading,\r\n                    content: fileSave,\r\n                    loading: loading,\r\n                    type: 'button',\r\n                    size: 'huge',\r\n                    icon: 'save',\r\n                    circular: true,\r\n                    color: 'pink',\r\n                    fluid: true,\r\n                },\r\n                onClick: async () => {\r\n                    await helpers.sleep(500);\r\n                    setLoading(true);\r\n                    try {\r\n                        const response = await send(\r\n                            channels.SHOW_BACKUP_DIALOG\r\n                        );\r\n                        setFileSave(response);\r\n                    } catch (err) {\r\n                        setFileSave(err);\r\n                    }\r\n                    setLoading(false);\r\n                },\r\n            },\r\n        },\r\n        onSubmit: async (values, form) => {\r\n            try {\r\n                const result = await send(channels.LOGIN, values);\r\n                console.log(result);\r\n                history.push({\r\n                    pathname: '/dashboard',\r\n                    state: result,\r\n                });\r\n            } catch (err) {\r\n                setTimeout(() => {\r\n                    console.log(err);\r\n                    setError(err);\r\n                    form.reset({});\r\n                    document.getElementById('username').focus();\r\n                }, 100);\r\n            }\r\n        },\r\n    };\r\n\r\n    const PurchaseComponent = {\r\n        screen: {\r\n            open: history ? true : false,\r\n            width: {},\r\n            close: {\r\n                closeOnDocumentClick: false,\r\n                closeOnEscape: false,\r\n                closeOnDimmerClick: false,\r\n                closeOnPortalMouseLeave: false,\r\n            },\r\n            segment: {\r\n                width: '100%',\r\n                height: '100%',\r\n                position: 'fixed',\r\n                zIndex: 1000,\r\n                backgroundColor: '#002b487d',\r\n            },\r\n            grid: {\r\n                style: { height: '100vh' },\r\n            },\r\n        },\r\n        header: {\r\n            title: 'Mckee Pure Water',\r\n            content: 'Purchase Screen Version 1.0.1',\r\n        },\r\n        input: {\r\n            account: {\r\n                attr: {},\r\n            },\r\n            since: {\r\n                attr: {},\r\n            },\r\n            areaCode: {\r\n                attr: {},\r\n            },\r\n            phone: {\r\n                attr: {},\r\n            },\r\n            fullname: {\r\n                attr: {},\r\n            },\r\n            first: {\r\n                attr: {},\r\n            },\r\n            last: {\r\n                attr: {},\r\n            },\r\n        },\r\n        button: {\r\n            edit: {\r\n                attr: {\r\n                    style: { marginTop: '30px' },\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            cancel: {\r\n                attr: {\r\n                    style: { marginTop: '30px' },\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            save: {\r\n                attr: {\r\n                    style: { marginTop: '30px' },\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            buy: {\r\n                attr: {\r\n                    style: { marginTop: '30px', width: '160px' },\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            renew: {\r\n                attr: {\r\n                    style: { marginTop: '30px', width: '160px' },\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            done: {\r\n                attr: {},\r\n                onClick: () => {},\r\n            },\r\n            history: {\r\n                attr: {},\r\n                onClick: () => {},\r\n            },\r\n        },\r\n        onSubmit: async (values) => {\r\n            console.log('PurchaseComponent: onSubmit:', values);\r\n        },\r\n        edit,\r\n    };\r\n\r\n    // DASHBOARD SCREEN COMPONENT\r\n    const DashboardComponent = {\r\n        screen: {\r\n            open: history ? true : false,\r\n            width: {\r\n                style: {\r\n                    maxWidth: 450,\r\n                },\r\n            },\r\n            close: {\r\n                closeOnDocumentClick: false,\r\n                closeOnEscape: false,\r\n                closeOnDimmerClick: false,\r\n                closeOnPortalMouseLeave: false,\r\n            },\r\n            segment: {\r\n                style: {\r\n                    margin: 0,\r\n                    height: '100%',\r\n                    overflow: 'hidden',\r\n                    zIndex: 1000,\r\n                    backgroundColor: '#002b487d',\r\n                },\r\n            },\r\n            grid: {\r\n                textAlign: 'center',\r\n                verticalAlign: 'middle',\r\n                style: {\r\n                    height: '100vh',\r\n                },\r\n            },\r\n            header: {\r\n                title: 'Mckee Pure Water',\r\n                content: 'Version 1.0',\r\n            },\r\n        },\r\n        header: {\r\n            title: 'Mckee Pure Water',\r\n            content: 'Dashboard',\r\n        },\r\n        input: {\r\n            phone: {\r\n                attr: {\r\n                    className: 'blueIcon',\r\n                    id: 'phone',\r\n                    placeholder: 'xxx-xxxx',\r\n                    focus: true,\r\n                    type: 'text',\r\n                    size: 'massive',\r\n                    icon: 'whatsapp',\r\n                    fluid: true,\r\n                    iconPosition: 'left',\r\n                    transparent: true,\r\n                },\r\n                normalize: helpers.normalize.phone,\r\n                onFocus: (form) =>\r\n                    form.batch(() => {\r\n                        form.change('account', '');\r\n                        form.change('firstName', '');\r\n                        form.change('lastName', '');\r\n                    }),\r\n                onChange: (change, value) => {\r\n                    setError(false);\r\n                    change(value);\r\n                },\r\n            },\r\n            account: {\r\n                attr: {\r\n                    id: 'account',\r\n                    className: 'blueIcon',\r\n                    type: 'text',\r\n                    placeholder: 'account #',\r\n                    size: 'massive',\r\n                    focus: true,\r\n                    fluid: true,\r\n                    icon: 'credit card',\r\n                    iconPosition: 'left',\r\n                    transparent: true,\r\n                    spellCheck: 'false',\r\n                    inverted: true,\r\n                },\r\n                normalize: helpers.normalize.account,\r\n                onFocus: (form) =>\r\n                    form.batch(() => {\r\n                        form.change('phone', '');\r\n                        form.change('firstName', '');\r\n                        form.change('lastName', '');\r\n                    }),\r\n                onChange: (change, value) => {\r\n                    setError(false);\r\n                    change(value);\r\n                },\r\n            },\r\n            firstName: {\r\n                attr: {\r\n                    id: 'firstName',\r\n                    placeholder: 'first name',\r\n                    className: 'blueIcon',\r\n                    icon: 'user circle',\r\n                    iconPosition: 'left',\r\n                    size: 'massive',\r\n                    spellCheck: 'false',\r\n                    fluid: true,\r\n                    focus: true,\r\n                    transparent: true,\r\n                    inverted: true,\r\n                },\r\n                onFocus: (form) =>\r\n                    form.batch(() => {\r\n                        form.change('phone', '');\r\n                        form.change('account', '');\r\n                    }),\r\n                onChange: (change, value) => {\r\n                    setError(false);\r\n                    change(value);\r\n                },\r\n            },\r\n            lastName: {\r\n                attr: {\r\n                    id: 'lastName',\r\n                    placeholder: 'last name',\r\n                    className: 'blueIcon',\r\n                    icon: 'user circle',\r\n                    iconPosition: 'left',\r\n                    size: 'massive',\r\n                    spellCheck: 'false',\r\n                    fluid: true,\r\n                    focus: true,\r\n                    transparent: true,\r\n                    inverted: true,\r\n                },\r\n                onFocus: (form) =>\r\n                    form.batch(() => {\r\n                        form.change('phone', '');\r\n                        form.change('account', '');\r\n                    }),\r\n                onChange: (change, value) => {\r\n                    setError(false);\r\n                    change(value);\r\n                },\r\n            },\r\n        },\r\n        button: {\r\n            find: {\r\n                attr: {\r\n                    id: 'FindMembership',\r\n                    content: 'Find Membership',\r\n                    color: 'blue',\r\n                    type: 'submit',\r\n                    size: 'huge',\r\n                    icon: 'search',\r\n                    labelPosition: 'right',\r\n                    circular: true,\r\n                    fluid: true,\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            add: {\r\n                attr: {\r\n                    id: 'AddButton',\r\n                    content: 'New Membership',\r\n                    type: 'button',\r\n                    size: 'huge',\r\n                    color: 'teal',\r\n                    icon: 'add circle',\r\n                    labelPosition: 'right',\r\n                    circular: true,\r\n                    fluid: true,\r\n                },\r\n                onClick: async () => {\r\n                    await helpers.sleep(500);\r\n                    history.push({ pathname: '/add', state: {} });\r\n                },\r\n            },\r\n            report: {\r\n                attr: {\r\n                    id: 'ReportButton',\r\n                    content: `Daily Report: ${new Date().toLocaleDateString()}`,\r\n                    type: 'button',\r\n                    color: 'yellow',\r\n                    size: 'huge',\r\n                    icon: 'calendar',\r\n                    labelPosition: 'right',\r\n                    circular: true,\r\n                    fluid: true,\r\n                },\r\n                onClick: async () => {\r\n                    await helpers.sleep(500);\r\n                    history.push({\r\n                        pathname: '/report',\r\n                        state: {},\r\n                    });\r\n                },\r\n            },\r\n            logout: {\r\n                attr: {\r\n                    content: 'Logout',\r\n                    type: 'button',\r\n                    id: 'LogoutButton',\r\n                    size: 'huge',\r\n                    color: 'black',\r\n                    icon: 'sign-out',\r\n                    labelPosition: 'right',\r\n                    circular: true,\r\n                    fluid: true,\r\n                },\r\n                onClick: async () => {\r\n                    await helpers.sleep(500);\r\n                    history.push({ pathname: '/', state: {} });\r\n                },\r\n            },\r\n        },\r\n        onSubmit: async (values, form) => {\r\n            try {\r\n                const data = await send(channels.FIND, values);\r\n                console.log(data);\r\n                if (data.membership) {\r\n                    const { record_id } = await send(channels.LAST_RECORD);\r\n                    console.log({ data, record_id });\r\n                    setTimeout(form.reset, 100);\r\n                    form.reset({});\r\n                    history.push({\r\n                        pathname: '/purchase',\r\n                        state: {\r\n                            record: data.membership,\r\n                            newRecordID: record_id,\r\n                            open: true,\r\n                            initialValues: {\r\n                                ...data.membership,\r\n                                record_id: record_id,\r\n                                renew: 0,\r\n                                buy: 0,\r\n                                fee: 0,\r\n                                invoiceDate: new Date().toLocaleDateString(),\r\n                                invoiceTime: new Date().toLocaleTimeString(),\r\n                            },\r\n                        },\r\n                    });\r\n                } else if (data.memberships) {\r\n                    setTimeout(form.reset, 100);\r\n                    console.log(data.memberships);\r\n                    history.push({\r\n                        pathname: '/accounts',\r\n                        state: data.memberships,\r\n                    });\r\n                } else {\r\n                    setTimeout(form.reset, 100);\r\n                    setError(true);\r\n                    document.getElementById('phone').focus();\r\n                    return data;\r\n                }\r\n            } catch (err) {\r\n                throw err;\r\n            }\r\n        },\r\n    };\r\n\r\n    // ADMIN SCREEN COMPONENT\r\n    const AdminLoginComponent = {\r\n        screen: {\r\n            open: history ? true : false,\r\n            width: {\r\n                style: {\r\n                    maxWidth: 450,\r\n                },\r\n            },\r\n            close: {\r\n                closeOnDocumentClick: false,\r\n                closeOnEscape: false,\r\n                closeOnDimmerClick: false,\r\n                closeOnPortalMouseLeave: false,\r\n            },\r\n            segment: {\r\n                style: {\r\n                    margin: 0,\r\n                    height: '100%',\r\n                    overflow: 'hidden',\r\n                    zIndex: 1000,\r\n                    backgroundColor: '#002b487d',\r\n                },\r\n            },\r\n            grid: {\r\n                textAlign: 'center',\r\n                verticalAlign: 'middle',\r\n                style: {\r\n                    height: '100vh',\r\n                },\r\n            },\r\n            header: {\r\n                title: 'Mckee Pure Water',\r\n                content: 'Version 1.0',\r\n            },\r\n        },\r\n        header: {\r\n            title: 'Mckee Pure Water',\r\n            content: 'Admin Login Verification',\r\n        },\r\n        input: {\r\n            password: {\r\n                attr: {\r\n                    id: 'password',\r\n                    placeholder: 'password',\r\n                    type: 'password',\r\n                    focus: true,\r\n                    error: error,\r\n                    size: 'huge',\r\n                },\r\n                onFocus: () => {},\r\n                onChange: helpers.reset.field,\r\n            },\r\n        },\r\n        button: {\r\n            submit: {\r\n                attr: {\r\n                    id: 'submit',\r\n                    content: 'Submit',\r\n                    circular: true,\r\n                    size: 'huge',\r\n                    type: 'submit',\r\n                    color: error ? 'red' : 'blue',\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            cancel: {\r\n                attr: {\r\n                    id: 'cancel',\r\n                    content: 'Cancel',\r\n                    circular: true,\r\n                    size: 'huge',\r\n                    type: 'button',\r\n                    secondary: true,\r\n                },\r\n                onClick: () => {\r\n                    setError(false);\r\n                    history.push('/');\r\n                },\r\n            },\r\n        },\r\n        onSubmit: async ({ password }, form) => {\r\n            console.log('onSubmit', { password });\r\n            if (password === '911') {\r\n                await helpers.sleep(500);\r\n                history.push({\r\n                    pathname: '/admin/users',\r\n                    state: { open: true },\r\n                });\r\n            } else {\r\n                setError(true);\r\n                setTimeout(form.reset);\r\n            }\r\n        },\r\n    };\r\n\r\n    // USER SCREEN COMPONENT\r\n    const UserComponent = {\r\n        screen: {\r\n            open: history ? true : false,\r\n            close: {\r\n                closeOnDocumentClick: false,\r\n                closeOnEscape: false,\r\n                closeOnDimmerClick: false,\r\n                closeOnPortalMouseLeave: false,\r\n            },\r\n            segment: {\r\n                style: {\r\n                    margin: 0,\r\n                    height: '100vh',\r\n                    overflow: 'scroll',\r\n                    zIndex: 1000,\r\n                    backgroundColor: '#002b487d',\r\n                },\r\n            },\r\n            grid: {\r\n                textAlign: 'center',\r\n                verticalAlign: 'middle',\r\n                style: {\r\n                    height: '100vh',\r\n                },\r\n            },\r\n            width: {\r\n                style: {\r\n                    maxWidth: 800,\r\n                },\r\n            },\r\n        },\r\n        header: {\r\n            title: 'Mckee Pure Water',\r\n            content: 'User Admin Screen',\r\n        },\r\n        form: {\r\n            onSubmit: async (values) => {\r\n                console.log('onSubmit', { values });\r\n                crud.create({ newItem: values, setState: setUsers });\r\n            },\r\n        },\r\n        button: {\r\n            add: {\r\n                attr: {\r\n                    id: 'add',\r\n                    content: 'Add',\r\n                    type: 'button',\r\n                    floated: 'right',\r\n                    circular: true,\r\n                    primary: true,\r\n                    size: 'huge',\r\n                    fluid: true,\r\n                },\r\n                onClick: () => setOpen(true),\r\n            },\r\n            done: {\r\n                attr: {\r\n                    id: 'done',\r\n                    content: 'Done',\r\n                    type: 'button',\r\n                    circular: true,\r\n                    size: 'huge',\r\n                    secondary: true,\r\n                },\r\n                onClick: () => {\r\n                    history.push('/');\r\n                },\r\n            },\r\n            delete: {\r\n                attr: {\r\n                    id: 'delete',\r\n                    content: 'Delete',\r\n                    circular: true,\r\n                    size: 'huge',\r\n                    negative: true,\r\n                },\r\n                onClick: (user_id) => {\r\n                    console.log('delete', { user_id });\r\n                    crud.delete({ deletedId: user_id, setState: setUsers });\r\n                },\r\n            },\r\n            edit: {\r\n                attr: {\r\n                    id: 'edit',\r\n                    type: 'button',\r\n                    content: 'Edit',\r\n                    size: 'huge',\r\n                    fluid: true,\r\n                    floated: 'right',\r\n                    circular: true,\r\n                    primary: true,\r\n                },\r\n                onClick: (user) => {\r\n                    console.log('Edit', { user });\r\n                    setUser(user);\r\n                    setOpen(true);\r\n                },\r\n            },\r\n        },\r\n        table: {\r\n            attr: {\r\n                id: 'UserTable',\r\n                celled: true,\r\n                compact: true,\r\n                definition: true,\r\n                basic: true,\r\n                inverted: true,\r\n                size: 'large',\r\n            },\r\n            header: {\r\n                fullWidth: true,\r\n            },\r\n            row: {\r\n                header: {\r\n                    style: { fontSize: '22px' },\r\n                },\r\n                body: {\r\n                    style: { fontSize: '20px', fontWeight: 'bold' },\r\n                },\r\n            },\r\n            cell: {\r\n                headerCells: [\r\n                    { content: 'username' },\r\n                    { content: 'password' },\r\n                    { content: 'Action', width: 5, textAlign: 'right' },\r\n                ],\r\n                header: {\r\n                    username: {\r\n                        content: 'username',\r\n                    },\r\n                    password: {\r\n                        content: 'password',\r\n                    },\r\n                    action: {\r\n                        content: 'Action',\r\n                        width: 5,\r\n                        textAlign: 'right',\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        action: {\r\n            fetchData: async () => {\r\n                const users = await send(channels.GET_USERS);\r\n                setUsers(users);\r\n            },\r\n        },\r\n        users,\r\n        setUsers,\r\n    };\r\n\r\n    // USER UPDATE COMPONENT\r\n    const UserModalComponent = {\r\n        modal: {\r\n            open: open,\r\n            dimmer: 'blurring',\r\n            size: 'fullscreen',\r\n            basic: true,\r\n            centered: true,\r\n        },\r\n        form: {\r\n            size: 'massive',\r\n        },\r\n        input: {\r\n            username: {\r\n                attr: {\r\n                    id: 'username',\r\n                    placeholder: 'username',\r\n                },\r\n                onFocus: () => {},\r\n                onChange: () => {},\r\n            },\r\n            password: {\r\n                attr: {\r\n                    id: 'password',\r\n                    placeholder: 'password',\r\n                },\r\n                onFocus: () => {},\r\n                onChange: () => {},\r\n            },\r\n        },\r\n        button: {\r\n            submit: {\r\n                attr: {\r\n                    id: 'submit',\r\n                    type: 'submit',\r\n                    content: !user.user_id ? 'Add' : 'Save',\r\n                    size: 'massive',\r\n                    circular: true,\r\n                    primary: true,\r\n                },\r\n                onClick: () => {},\r\n            },\r\n            cancel: {\r\n                attr: {\r\n                    id: 'cancel',\r\n                    type: 'button',\r\n                    content: 'Cancel',\r\n                    size: 'massive',\r\n                    circular: true,\r\n                    secondary: true,\r\n                },\r\n                onClick: () => {\r\n                    setUser({});\r\n                    setOpen(false);\r\n                },\r\n            },\r\n        },\r\n        onSubmit: async (values) => {\r\n            try {\r\n                user.user_id\r\n                    ? await crud.update({\r\n                          updatedItem: {\r\n                              ...user,\r\n                              username: values.username,\r\n                              password: values.password,\r\n                          },\r\n                          setState: setUsers,\r\n                          channel: channels.EDIT_USER,\r\n                      })\r\n                    : await crud.create({\r\n                          newItem: values,\r\n                          setState: setUsers,\r\n                          channel: channels.ADD_USER,\r\n                      });\r\n                setOpen(false);\r\n                setUser({});\r\n            } catch (err) {\r\n                return console.log(err.message);\r\n            }\r\n        },\r\n        user,\r\n    };\r\n\r\n    // STORE\r\n    const store = {\r\n        component: {\r\n            login: LoginComponent,\r\n            dashboard: DashboardComponent,\r\n            admin: AdminLoginComponent,\r\n            user: UserComponent,\r\n            userModal: UserModalComponent,\r\n        },\r\n        effect: {\r\n            pulse: TransitionEffect.pulse,\r\n        },\r\n    };\r\n\r\n    return (\r\n        <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n    );\r\n};\r\n\r\nexport default withRouter(Store);\r\n","C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Helpers\\index.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\api.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Button\\index.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Field\\index.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Screen\\index.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Form\\FindForm.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Login.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Dashboard.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Form\\Login.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Form\\Find.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Form\\index.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Header\\index.js",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Admin.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Table\\index.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\User.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MPW-POS\\Modal\\UserModal.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MckeePureWater\\Screen\\PurchaseScreen.jsx",[],"C:\\Users\\hungq\\Development\\Softwares\\mckee-pure-water\\src\\react\\MckeePureWater\\Screen\\LoginScreen.jsx",[],{"ruleId":null,"fatal":true,"severity":2,"message":"196","line":56,"column":25},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"197","replacedBy":"201"},{"ruleId":"199","replacedBy":"202"},{"ruleId":"197","replacedBy":"203"},{"ruleId":"199","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":4,"column":17,"nodeType":"207","messageId":"208","endLine":4,"endColumn":23},{"ruleId":"205","severity":1,"message":"209","line":13,"column":12,"nodeType":"207","messageId":"208","endLine":13,"endColumn":18},{"ruleId":"205","severity":1,"message":"210","line":15,"column":11,"nodeType":"207","messageId":"208","endLine":15,"endColumn":25},{"ruleId":"197","replacedBy":"211"},{"ruleId":"199","replacedBy":"212"},{"ruleId":"205","severity":1,"message":"213","line":1,"column":20,"nodeType":"207","messageId":"208","endLine":1,"endColumn":29},{"ruleId":"205","severity":1,"message":"214","line":5,"column":7,"nodeType":"207","messageId":"208","endLine":5,"endColumn":12},{"ruleId":"197","replacedBy":"215"},{"ruleId":"199","replacedBy":"216"},{"ruleId":"205","severity":1,"message":"217","line":31,"column":18,"nodeType":"207","messageId":"208","endLine":31,"endColumn":25},{"ruleId":"205","severity":1,"message":"218","line":292,"column":11,"nodeType":"207","messageId":"208","endLine":292,"endColumn":28},"Parsing error: Unexpected token, expected \",\"\n\n  54 |                             buy: 0,\n  55 |                             fee: 0\n> 56 |                         invoiceDate: new Date().toLocaleDateString(),\n     |                         ^\n  57 |                         invoiceTime: new Date().toLocaleTimeString(),\n  58 | \n  59 |","no-native-reassign",["219"],"no-negated-in-lhs",["220"],["219"],["220"],["219"],["220"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'action' is assigned a value but never used.","'updateUserList' is assigned a value but never used.",["219"],["220"],"'useEffect' is defined but never used.","'sleep' is assigned a value but never used.",["219"],["220"],"'setEdit' is assigned a value but never used.","'PurchaseComponent' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]